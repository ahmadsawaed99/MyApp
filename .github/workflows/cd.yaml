# This workflow will deploy to production

name: Deploy to Amazon EKS

on:
  push:
    branches: ["master"]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: Deployment

    env:
      IMAGE_TAG: ${{ github.sha }}
      IMAGE_NAME: ${{ vars.IMAGE_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          TAG=${{ env.IMAGE_TAG }}
          docker build -t $IMAGE:$TAG -t $IMAGE:latest .
          docker push $IMAGE:$TAG
          docker push $IMAGE:latest
          
      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name "${{ secrets.EKS_CLUSTER }}" --region "${{ vars.AWS_REGION }}"

      - name: Ensure Docker Hub pull secret
        run: |
          kubectl create secret docker-registry dockerhub-cred \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username='${{ secrets.DOCKERHUB_USERNAME }}' \
            --docker-password='${{ secrets.DOCKERHUB_TOKEN }}' \
            --namespace "${{ secrets.NAMESPACE }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Set image on Deployment
        run: |
          kubectl -n "${{ secrets.NAMESPACE }}" set image deployment/"${{ secrets.DEPLOYMENT }}" \
            backend="${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}:$IMAGE_TAG"

      - name: Wait for rollout
        run: kubectl -n "${{ secrets.NAMESPACE }}" rollout status deployment/"${{ secrets.DEPLOYMENT }}" --timeout=5m
